package shaper.mapping.model.shacl;

import janus.database.DBSchema;
import shaper.Shaper;
import shaper.mapping.Symbols;
import shaper.mapping.model.r2rml.*;

import java.net.URI;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ShaclDocModelFactory {
    private static R2RMLModel r2rmlModel;
    private static ShaclDocModel shaclDocModel;
    // R2RML
    public static ShaclDocModel getSHACLDocModel(R2RMLModel r2rmlModel) {
        ShaclDocModelFactory.r2rmlModel = r2rmlModel;
        shaclDocModel = new ShaclDocModel(URI.create(Shaper.shapeBaseURI), Shaper.prefixForShapeBaseURI);

        addDirectives();

        Set<TriplesMap> triplesMaps = r2rmlModel.getTriplesMaps();

        for (TriplesMap triplesMap : triplesMaps) {
            //create a node shape
            NodeShape nodeShape = new NodeShape(createNodeShapeID(triplesMap), triplesMap.getUri());

            List<PredicateObjectMap> predicateObjectMaps = triplesMap.getPredicateObjectMaps();
            int sizeOfPredicateObjectMaps = predicateObjectMaps.size();
            for (int i = 0; i < sizeOfPredicateObjectMaps; i++) {
                PredicateObjectMap predicateObjectMap = predicateObjectMaps.get(i);

                // when referencing object map
                if (predicateObjectMap.getRefObjectMap().isPresent()) continue;

                PredicateMap predicateMap = predicateObjectMap.getPredicateMap();
                ObjectMap objectMap = predicateObjectMap.getObjectMap().get();

                // create property shape from ObjectMap of predicate-object map
                IRI propertyShapeID = createPropertyShapeID(nodeShape.getID(), predicateMap.getConstant().get());
                PropertyShape propertyShape = new PropertyShape(propertyShapeID, predicateMap, objectMap);
                shaclDocModel.addShape(propertyShape);

                // for reference from node shape to property shape
                nodeShape.addPropertyShape(propertyShape.getID());
            }

            shaclDocModel.addShape(nodeShape);
        }

        for (TriplesMap triplesMap : triplesMaps) {
            // find the mapped shape
            NodeShape nodeShape = shaclDocModel.getMappedNodeShape(triplesMap.getUri());
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            List<PredicateObjectMap> predicateObjectMaps = triplesMap.getPredicateObjectMaps();
            for (PredicateObjectMap predicateObjectMap : predicateObjectMaps) {

                // when object map
                if (predicateObjectMap.getObjectMap().isPresent()) continue;

                PredicateMap predicateMap = predicateObjectMap.getPredicateMap();
                RefObjectMap refObjectMap = predicateObjectMap.getRefObjectMap().get();

                // create property shape from RefObjectMap of predicate-object map
                IRI propertyShapeID = createPropertyShapeID(nodeShape.getID(), predicateMap.getConstant().get());
                PropertyShape propertyShape = new PropertyShape(propertyShapeID, predicateMap, refObjectMap);
                shaclDocModel.addShape(propertyShape);

                // for reference from node shape to property shape
                nodeShape.addPropertyShape(propertyShape.getID());
            }
        }

        return shaclDocModel;
    }

    private static IRI createNodeShapeID(TriplesMap triplesMap) {
        return IRI.create(shaclDocModel.getBaseIRI() + Symbols.HASH + triplesMap.getUri().getFragment() + "Shape");
    }

    private static IRI createPropertyShapeID(IRI nodeShapeID, String predicateURIString) {
        URI predicateURI = URI.create(predicateURIString);
        String prefixOfPredicateURI = shaclDocModel.getPrefixOf(predicateURI);

        String postfix = predicateURI.getFragment();
        if (postfix == null) {
            Path path = Path.of(predicateURI.getPath());
            postfix = path.getName(path.getNameCount()-1).toString();
        }

        if (prefixOfPredicateURI != null)
            postfix = prefixOfPredicateURI + Symbols.DASH + postfix;

        return IRI.create(nodeShapeID + Symbols.DASH + postfix);
    }

    private static void addDirectives() {
        // directives
        // IMPORTS: impossible since the RDF graph generated by r2rml-parser doesn't declare @base directive.
        // ;

        // PREFIX: from RDF graph generated by the R2RML document.
        Set<Map.Entry<String, String>> entrySet = r2rmlModel.getPrefixMap().entrySet();
        for (Map.Entry<String, String> entry: entrySet)
            shaclDocModel.addPrefixDecl(entry.getKey(), entry.getValue());
    }

    //Direct Mapping
    public static ShaclDocModel getSHACLDocModel(DBSchema dbSchema) {
        return null;
    }
}
